package org.example;

import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.Dragboard;
import javafx.scene.input.TransferMode;
import javafx.scene.layout.*;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.image.PixelWriter;
import javafx.scene.image.WritableImage;
import javafx.scene.image.Image;
import javafx.scene.image.PixelFormat;

import java.awt.image.BufferedImage;
import java.nio.IntBuffer;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class AppUI extends Application {

    private ImageView originalImageView = new ImageView();
    private ImageView processedImageView = new ImageView();
    private Label originalImageLabel = new Label("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
    private Label processedImageLabel = new Label("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
    private Slider thresholdSlider = new Slider(0, 255, 128);
    private ProgressBar progressBar = new ProgressBar(0);
    private BufferedImage originalImage;
    private BufferedImage processedImage;
    private ImageProcessor imageProcessor = new ImageProcessor();
    private PerformanceTimer performanceTimer = new PerformanceTimer();
    private Label dragDropLabel = new Label("–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ üìÇ");

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("üñº Image Highlighter");

        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        HBox topMenu = new HBox(15);
        topMenu.setPadding(new Insets(10));

        Button loadButton = new Button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å");
        Button processButton = new Button("‚ú® –û–±—Ä–∞–±–æ—Ç–∞—Ç—å");
        Button saveButton = new Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å");

        thresholdSlider.setShowTickLabels(true);
        thresholdSlider.setShowTickMarks(true);
        thresholdSlider.setMajorTickUnit(50);
        thresholdSlider.setBlockIncrement(10);

        Label thresholdLabel = new Label("–ü–æ—Ä–æ–≥: ");
        thresholdLabel.setFont(Font.font(14));
        thresholdLabel.setTextFill(Color.WHITE);

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progressBar.setPrefWidth(200);
        progressBar.setVisible(false);

        topMenu.getChildren().addAll(loadButton, thresholdLabel, thresholdSlider, processButton, saveButton, progressBar);
        topMenu.setStyle("-fx-background-color: #333; -fx-padding: 10;");

        // üéØ –ó–æ–Ω–∞ Drag & Drop
        StackPane dragDropArea = new StackPane();
        dragDropArea.setStyle("-fx-border-color: white; -fx-border-width: 2; -fx-padding: 20; -fx-background-color: #444;");
        dragDropLabel.setTextFill(Color.WHITE);
        dragDropLabel.setFont(Font.font(16));
        dragDropArea.getChildren().add(dragDropLabel);
        dragDropArea.setMinHeight(150);

        // üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Drag & Drop
        dragDropArea.setOnDragOver(event -> {
            if (event.getGestureSource() != dragDropArea && event.getDragboard().hasFiles()) {
                event.acceptTransferModes(TransferMode.COPY);
            }
            event.consume();
        });

        dragDropArea.setOnDragDropped(event -> {
            Dragboard db = event.getDragboard();
            if (db.hasFiles()) {
                File file = db.getFiles().get(0);
                loadImageFromFile(file);
            }
            event.setDropCompleted(true);
            event.consume();
        });

        // üéØ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º)
        originalImageLabel.setVisible(false);
        processedImageLabel.setVisible(false);

        VBox originalImageBox = new VBox(5, originalImageLabel, originalImageView);
        VBox processedImageBox = new VBox(5, processedImageLabel, processedImageView);
        originalImageLabel.setTextFill(Color.WHITE);
        processedImageLabel.setTextFill(Color.WHITE);
        originalImageLabel.setFont(Font.font(14));
        processedImageLabel.setFont(Font.font(14));

        HBox imagesBox = new HBox(15);
        imagesBox.setPadding(new Insets(20));
        imagesBox.getChildren().addAll(originalImageBox, processedImageBox);

        // üéØ –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        VBox root = new VBox(15);
        root.setPadding(new Insets(20));
        root.setStyle("-fx-background-color: #222;");
        root.getChildren().addAll(topMenu, dragDropArea, imagesBox);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        loadButton.setOnAction(e -> openFileChooser(primaryStage));
        processButton.setOnAction(e -> processImage());
        saveButton.setOnAction(e -> saveImage(primaryStage));

        Scene scene = new Scene(root, 1000, 700);
        scene.getStylesheets().add(getClass().getClassLoader().getResource("styles.css").toExternalForm());

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     */
    private void openFileChooser(Stage stage) {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "*.png", "*.jpg", "*.jpeg", "*.bmp"));

        File file = fileChooser.showOpenDialog(stage);
        if (file != null) {
            loadImageFromFile(file);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–¥–ø–∏—Å—å.
     */
    private void loadImageFromFile(File file) {
        try {
            originalImage = ImageIO.read(file);
            Image fxImage = new Image(file.toURI().toString());
            originalImageView.setImage(fxImage);
            originalImageView.setFitWidth(450);
            originalImageView.setPreserveRatio(true);
            dragDropLabel.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ");
            originalImageLabel.setText("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
            originalImageLabel.setVisible(true);
            processedImageLabel.setVisible(false);
        } catch (IOException ex) {
            showAlert("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!");
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     */
    private void processImage() {
        if (originalImage == null) {
            showAlert("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!");
            return;
        }

        ImageProcessingConfig config = new ImageProcessingConfig();
        config.setThreshold((int) thresholdSlider.getValue());

        progressBar.setVisible(true);

        Task<Void> processingTask = new Task<>() {
            @Override
            protected Void call() {
                performanceTimer.start();
                processedImage = imageProcessor.highlightObjects(originalImage, config);
                long elapsedNs = performanceTimer.stop();
                updateMessage("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ‚úÖ | –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: " + (elapsedNs / 1_000_000) + " –º—Å");
                return null;
            }
        };

        processingTask.setOnSucceeded(e -> {
            processedImageView.setImage(convertToFXImage(processedImage));
            processedImageView.setFitWidth(450);
            processedImageView.setPreserveRatio(true);
            progressBar.setVisible(false);
            processedImageLabel.setText("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
            processedImageLabel.setVisible(true);
            dragDropLabel.setText(processingTask.getMessage());
        });

        new Thread(processingTask).start();
    }

    private void saveImage(Stage stage) {
        if (processedImage == null) {
            showAlert("–û—à–∏–±–∫–∞", "–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!");
            return;
        }

        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("PNG —Ñ–∞–π–ª—ã", "*.png"));

        File file = fileChooser.showSaveDialog(stage);
        if (file != null) {
            try {
                ImageIO.write(processedImage, "png", file);
                showAlert("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
            } catch (IOException ex) {
                showAlert("–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!");
            }
        }
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private Image convertToFXImage(BufferedImage img) {
        if (img == null) return null;

        int width = img.getWidth();
        int height = img.getHeight();
        WritableImage writableImage = new WritableImage(width, height);
        PixelWriter pixelWriter = writableImage.getPixelWriter();

        int[] pixels = new int[width * height];
        img.getRGB(0, 0, width, height, pixels, 0, width);

        pixelWriter.setPixels(0, 0, width, height, PixelFormat.getIntArgbInstance(), pixels, 0, width);

        return writableImage;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
